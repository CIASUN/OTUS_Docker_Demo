name: .NET CI Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: myapp
  CONNECTION_STRING: "Host=postgres;Database=myapp;Username=postgres;Password=postgres"

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Debug PostgreSQL logs
      run: |
        echo "üõ†Ô∏è Debugging PostgreSQL container state..."
        docker ps -a
        docker logs $(docker ps -q --filter "ancestor=postgres:13-alpine" | head -n 1)

    - name: Wait for PostgreSQL to be ready
      env:
        PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
      run: |
        for i in {1..10}; do
          if pg_isready -h postgres -U $POSTGRES_USER -d $POSTGRES_DB; then
            echo "‚úÖ PostgreSQL is ready!"
            exit 0
          fi
          echo "Waiting for PostgreSQL... Attempt $i"
          sleep 2
        done
        echo "‚ùå PostgreSQL failed to start"
        exit 1

    - name: Apply migrations manually
      env:
        PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
      run: |
        psql -h postgres -U $POSTGRES_USER -d $POSTGRES_DB -f WebApplication/migrations/001_init.sql

    - name: Restore dependencies
      working-directory: WebApplication
      run: dotnet restore

    - name: Build
      working-directory: WebApplication
      run: dotnet build --no-restore

    - name: Verify migration applied (check 'users' table)
      env:
        PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
      run: |
        echo "Checking if 'users' table exists..."
        psql -h postgres -U $POSTGRES_USER -d $POSTGRES_DB -c "
          SELECT table_name
          FROM information_schema.tables
          WHERE table_schema = 'public' AND table_name = 'users';
        "
